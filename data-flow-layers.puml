@startuml data-flow-layers
!theme plain

title Flujo de Datos entre Capas - Clean Architecture Frontend

!define PRESENTATION_COLOR #E3F2FD
!define APPLICATION_COLOR #F3E5F5  
!define INFRASTRUCTURE_COLOR #E8F5E8
!define DOMAIN_COLOR #FFF3E0

rectangle "ðŸŽ¨ **PRESENTATION LAYER**" as presentation PRESENTATION_COLOR {
  rectangle "Pages\n(Inertia Components)" as pages
  rectangle "Components\n(Reusable UI)" as components  
  rectangle "Hooks\n(UI Logic)" as hooks
  
  pages -down-> hooks : "useState,\nuseEffect"
  components -down-> hooks : "Shared state\nlogic"
}

rectangle "ðŸ§  **APPLICATION LAYER**" as application APPLICATION_COLOR {
  rectangle "Use Cases\n(Business Logic)" as usecases
  rectangle "DTOs\n(Data Transfer)" as dtos
  rectangle "Mappers\n(Data Transform)" as mappers
  
  usecases -down-> dtos : "Structure\ndata"
  usecases -down-> mappers : "Transform\nformats"
}

rectangle "ðŸ”Œ **INFRASTRUCTURE LAYER**" as infrastructure INFRASTRUCTURE_COLOR {
  rectangle "Services\n(API Clients)" as services
  rectangle "HTTP Client\n(Axios/Fetch)" as httpclient
  rectangle "Transformers\n(API â†” Domain)" as transformers
  
  services -down-> httpclient : "HTTP\nrequests"  
  services -down-> transformers : "Data\ntransformation"
}

rectangle "ðŸ“‹ **DOMAIN LAYER**" as domain DOMAIN_COLOR {
  rectangle "Entities\n(Interfaces/Types)" as entities
  rectangle "Contracts\n(Repository Interfaces)" as contracts
  rectangle "Business Rules\n(Domain Logic)" as businessrules
  
  entities -down-> contracts : "Define\ncontracts"
  entities -down-> businessrules : "Business\nvalidation"
}

' === DEPENDENCY FLOW (Top to Bottom) ===
presentation -down-> application : "ðŸ”„ **Dependency Inversion**\nHooks call Use Cases\nPages use Hooks"
application -down-> infrastructure : "ðŸ”„ **Service Implementation**\nUse Cases call Services\nDTOs structure API calls"  
infrastructure -down-> domain : "ðŸ”„ **Domain Contracts**\nServices implement Contracts\nTransformers use Entities"

' === DATA FLOW (Bidirectional) ===
presentation <-up-> application : "ðŸ“Š **Data Flow**\nâ–¼ User actions\nâ–² State updates"
application <-up-> infrastructure : "ðŸ“Š **API Communication**\nâ–¼ Service calls\nâ–² API responses"
infrastructure <-up-> domain : "ðŸ“Š **Type Safety**\nâ–¼ Typed requests\nâ–² Typed entities"

' === DETAILED ANNOTATIONS ===
note top of presentation
  **Responsibilities:**
  â€¢ User Interface & Interaction
  â€¢ Form handling & validation
  â€¢ Navigation & routing
  â€¢ State management (UI)
  â€¢ Event handling
end note

note top of application  
  **Responsibilities:**
  â€¢ Business logic orchestration
  â€¢ Use case implementation
  â€¢ Data transformation
  â€¢ Validation rules
  â€¢ Error handling
end note

note top of infrastructure
  **Responsibilities:**  
  â€¢ External API communication
  â€¢ Data persistence
  â€¢ HTTP client configuration
  â€¢ Response transformation
  â€¢ Error mapping
end note

note top of domain
  **Responsibilities:**
  â€¢ Business entities definition
  â€¢ Domain contracts
  â€¢ Business rules & constraints
  â€¢ Type definitions
  â€¢ Pure business logic
end note

' === EXAMPLE FLOW ANNOTATION ===
note as exampleflow
  **Example: Create Cliente Flow**
  
  1. **ClienteCreatePage** (Presentation)
     â†“ User fills form
     
  2. **useGenericForm** (Presentation)
     â†“ Calls use case
     
  3. **GenericUseCase.createEntity()** (Application)
     â†“ Applies business rules
     
  4. **ClientesService.store()** (Infrastructure)
     â†“ Makes API call
     
  5. **Cliente Entity** (Domain)
     â†‘ Returns typed entity
     
  6. **Success State** (Presentation)
     â†‘ Updates UI
end note

@enduml