@startuml frontend-communication-flow
!theme plain

title Flujo de Comunicaci√≥n - Crear Cliente (Ejemplo)

actor Usuario as user
participant "ClienteCreatePage\n(Page Component)" as page
participant "useGenericForm\n(Custom Hook)" as hook
participant "GenericUseCase\n(Use Case)" as usecase
participant "ClientesService\n(Infrastructure)" as service
participant "Laravel API\n(Backend)" as api

== üìù Inicializaci√≥n del Formulario ==
user -> page : Navega a crear cliente
activate page
page -> hook : useGenericForm(null, clientesService, initialData)
activate hook
hook --> page : { data, setData, submit, processing, errors }
page --> user : Muestra formulario vac√≠o
deactivate page

== üì• Usuario llena el formulario ==
user -> page : Completa campos del formulario
activate page
page -> hook : setData({ nombre: "Juan", email: "juan@email.com" })
hook --> page : Actualiza estado local
page --> user : UI actualizada con datos
deactivate page

== üöÄ Env√≠o del formulario ==
user -> page : Click en "Guardar"
activate page
page -> hook : submit()
activate hook

note over hook
  **Hook State Management**
  - setProcessing(true)
  - clearErrors()
  - Preparar datos
end note

hook -> usecase : createEntity(formData)
activate usecase

note over usecase
  **Business Logic Layer**
  - Validar reglas de negocio
  - Transformar datos si necesario
  - Aplicar l√≥gica de dominio
end note

usecase -> service : store(clienteFormData)
activate service

note over service
  **Infrastructure Layer**
  - Preparar request HTTP
  - Transformar FormData ‚Üí API format
  - Manejar autenticaci√≥n
end note

service -> api : POST /clientes
activate api

note over api
  **Backend Processing**
  - Validaci√≥n de datos
  - Persistencia en BD
  - Business logic del servidor
end note

== ‚úÖ Respuesta Exitosa ==
api --> service : 201 Created { cliente: {...} }
deactivate api

service --> usecase : Cliente (domain object)
deactivate service

note over usecase
  **Success Processing**
  - Transformar respuesta
  - Aplicar reglas post-creaci√≥n
  - Preparar datos para UI
end note

usecase --> hook : Cliente creado exitosamente
deactivate usecase

note over hook
  **UI State Update**
  - setProcessing(false)
  - Mostrar notificaci√≥n de √©xito
  - Limpiar formulario o redirigir
end note

hook -> page : Notificaci√≥n de √©xito
deactivate hook

page --> user : "Cliente creado exitosamente"
page -> page : Redirecci√≥n a lista de clientes
deactivate page

== ‚ùå Manejo de Errores ==
note over service
  Si hay error en cualquier punto:
  1. API devuelve error HTTP
  2. Service transforma error
  3. UseCase procesa error de negocio  
  4. Hook actualiza UI con errores
  5. Page muestra mensaje al usuario
end note

@enduml